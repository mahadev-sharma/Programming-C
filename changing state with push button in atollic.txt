/**
 ******************************************************************************
 * File Name          : main.c
 * Description        : Main program body
 ******************************************************************************
 *
 * COPYRIGHT(c) 2016 STMicroelectronics
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *   1. Redistributions of source code must retain the above copyright notice,
 *      this list of conditions and the following disclaimer.
 *   2. Redistributions in binary form must reproduce the above copyright notice,
 *      this list of conditions and the following disclaimer in the documentation
 *      and/or other materials provided with the distribution.
 *   3. Neither the name of STMicroelectronics nor the names of its contributors
 *      may be used to endorse or promote products derived from this software
 *      without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************
 */
/* Includes ------------------------------------------------------------------*/
#include "stm32f3xx_hal.h"
#include "usb_device.h"

/* USER CODE BEGIN Includes */
#include <vcp_prog8125.h>

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
static GPIO_InitTypeDef GPIO_InitStruct;

uint16_t ledArray[8]={GPIO_PIN_9, GPIO_PIN_8, GPIO_PIN_15, GPIO_PIN_14, GPIO_PIN_13, GPIO_PIN_12, GPIO_PIN_11, GPIO_PIN_10};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void Error_Handler(void);
static void MX_GPIO_Init(void);
void HD44780_Init(void);
void HD44780_PutChar(unsigned char c);
void HD44780_GotoXY(unsigned char x, unsigned char y);
void HD44780_PutStr(char *str);
void HD44780_ClrScr(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
circularQueue_t VcpQueue;		// queue used for input from vcp
/* USER CODE END 0 */

int main(void) {

	/* USER CODE BEGIN 1 */
	initializeVcpQueue(&VcpQueue);
	//uint16_t lastLed = 0;
	//int  ledOnOffState = 0;

	/* USER CODE END 1 */

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* Configure the system clock */
	SystemClock_Config();

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_USB_DEVICE_Init();

	/* USER CODE BEGIN 2 */
	/* -2- Configure PE.8 to PE.15 IOs in output push-pull mode to drive external LEDs */
	__GPIOE_CLK_ENABLE()
	;
	GPIO_InitStruct.Pin = (GPIO_PIN_15 | GPIO_PIN_14 | GPIO_PIN_13 | GPIO_PIN_12
			| GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_8);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

	__GPIOA_CLK_ENABLE()
	;
	GPIO_InitStruct.Pin = (GPIO_PIN_0 );
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);



	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	int counterLoopForCase=0;
	int counterForPushButton=0;
	//this code is made up upon lcd rgb
	while (1)
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		{


				if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1 )
				{

					switch (counterLoopForCase)
					{
					case 0:
						if (counterForPushButton == 0)
						{
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
							HAL_Delay(500);
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
							counterForPushButton = 1;
							counterLoopForCase = 1;
						}
						break;
					case 1:
						if (counterForPushButton == 1)
                        {
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
							HAL_Delay(500);
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
						}
						counterForPushButton = 2;
						counterLoopForCase = 2;
						break;
					case 2:
						if (counterForPushButton == 2)
						{
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
							HAL_Delay(500);
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);
						}
						counterForPushButton = 3;
						counterLoopForCase = 3;
						break;
					case 3:
						if (counterForPushButton == 3)
						{
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
							HAL_Delay(500);
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
						}
						counterForPushButton = 4;
						counterLoopForCase = 4;
						break;
					case 4:
						if (counterForPushButton == 4)
						{
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
							HAL_Delay(500);
						    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
						}
						counterForPushButton = 5;
						counterLoopForCase = 5;

						break;
					case 5:
						if (counterForPushButton == 5)
						{
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
						HAL_Delay(500);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);

						}
						counterForPushButton = 6;
						counterLoopForCase = 6;

						break;
					case 6:
						if (counterForPushButton == 6)
						{
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
						HAL_Delay(500);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);

						}
						counterForPushButton = 7;
						counterLoopForCase = 7;

						break;
					case 7:
						if (counterForPushButton == 7)
						{
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
						HAL_Delay(500);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);

						}
						counterForPushButton = 8;
						counterLoopForCase = 8;

						break;
					case 8:
						if (counterForPushButton == 8)
						{
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
						HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_SET);
						HAL_Delay(500);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, GPIO_PIN_RESET);

						}
						counterForPushButton = 9;
						counterLoopForCase = 9;

						break;
					case 9:
						if (counterForPushButton == 9)
						{
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
							HAL_Delay(500);
						    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);

						}
						counterForPushButton = 10;
						counterLoopForCase = 10;

						break;
					case 10:
						if (counterForPushButton == 10)
						{


							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
							HAL_Delay(500);
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
							HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
						}

						counterForPushButton = 11;
						counterLoopForCase = 11;
						break;
					case 11:
						if (counterForPushButton == 11)
						{HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
						 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_SET);
						 HAL_Delay(500);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);

						}
						counterForPushButton = 12;
						counterLoopForCase = 12;
						break;
					case 12:
						if (counterForPushButton == 12)
						{HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
						 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_SET);
						 HAL_Delay(500);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);

						}
						counterForPushButton = 13;
						counterLoopForCase = 13;
						break;

					case 13:
						if (counterForPushButton == 13)
						{HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
						 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_SET);
						 HAL_Delay(500);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, GPIO_PIN_RESET);



						}

						counterForPushButton = 14;
						counterLoopForCase = 14;
						break;

					case 14:
						if (counterForPushButton == 14)
						{HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);
						 HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);
						 HAL_Delay(500);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);
					    HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);

						}

						counterForPushButton = 0;
						counterLoopForCase = 0;
						break;

					default:
						break;
				}
					}

				}
		}

		/*for(int i=0; i < 8; i++ )
		{
			if( HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != 1)
			{
				if( lastLed != 0)
					HAL_GPIO_WritePin( GPIOE, lastLed, GPIO_PIN_RESET);
		            HAL_GPIO_WritePin( GPIOE, ledArray[i], GPIO_PIN_SET);
				    lastLed = ledArray[i];
				    HAL_Delay( 500 );
			}
			else
			{
				if( ledOnOffState )
				{
					HAL_GPIO_WritePin( GPIOE, ledArray[i], GPIO_PIN_SET);
				}
				else
				{
					HAL_GPIO_WritePin( GPIOE, ledArray[i], GPIO_PIN_RESET);
				}

				if( i == 7 )
				{
					HAL_Delay( 500 );
					ledOnOffState = !ledOnOffState;

				}
			}
		}*/


	/* USER CODE END 3 */



/** System Clock Configuration
 */
void SystemClock_Config(void) {

	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInit;

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
		Error_Handler();
	}

	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
	PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
		Error_Handler();
	}

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/** Configure pins as 
 * Analog
 * Input
 * Output
 * EVENT_OUT
 * EXTI
 */
static void MX_GPIO_Init(void) {

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE()
	;
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
	}
	/* USER CODE END Error_Handler */
}

#ifdef USE_FULL_ASSERT

/**
 * @brief Reports the name of the source file and the source line number
 * where the assert_param error has occurred.
 * @param file: pointer to the source file name
 * @param line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t* file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */

}

#endif

/**
 * @}
 */

/**
 * @}
 */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
